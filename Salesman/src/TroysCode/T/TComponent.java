package TroysCode.T;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.LayoutManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.io.Serializable;
import java.util.EventListener;

import javax.swing.JComponent;
import javax.swing.event.EventListenerList;

/**
 * This class is the base class on which all {@link TComponent}s are built. It
 * is similar in concept to the {@link JComponent} class.
 * 
 * @author Sebastian Troy
 */
public abstract class TComponent implements Serializable, MouseListener, MouseMotionListener, KeyListener, ActionListener
	{
		private static final long serialVersionUID = 1L;

		/**
		 * This constant refers to a corner of the {@link TComponent}.
		 */
		public static final byte TOPLEFT = 0;
		/**
		 * This constant refers to a corner of the {@link TComponent}.
		 */
		public static final byte TOPRIGHT = 1;
		/**
		 * This constant refers to a corner of the {@link TComponent}.
		 */
		public static final byte BOTTOMLEFT = 2;
		/**
		 * This constant refers to a corner of the {@link TComponent}.
		 */
		public static final byte BOTTOMRIGHT = 3;

		/**
		 * All {@link TComponent}s must be added to a class which extends
		 * {@link TComponentContainer}. This variable allows the
		 * {@link TComponent} to keep track of which {@link TComponentContainer}
		 * is it within.
		 */
		protected TComponentContainer tComponentContainer = null;

		/**
		 * The x coordinate of the {@link TComponent}.
		 */
		protected double x = 0;
		/**
		 * The y coordinate of the {@link TComponent}.
		 */
		protected double y = 0;

		/**
		 * The width, in pixels, of the {@link TComponent}.
		 */
		protected double width = 0;
		/**
		 * The height, in pixels, of the {@link TComponent}.
		 */
		protected double height = 0;

		/**
		 * This {@link Color} is used when the {@link TComponent} is rendered,
		 * if it has been set. A {@link Rectangle} is filled with
		 * <code>(x, y, width, height)</code> is filled with this {@link Color}.
		 */
		protected Color backgroundColour = null;

		/**
		 * This variable allows the {@link TComponent} to keep track of whether
		 * the user is currently interacting with it.
		 */
		protected boolean inUse = false;

		/**
		 * This {@link EventListenerList} holds any {@link EventListener}s that
		 * you want the {@link TComponent} to send events, which are generated
		 * by the {@link TComponent}, to.
		 * <p>
		 * {@link ActionEvent}s are generated by all {@link TComponent}s, except
		 * {@link TScrollBar}s and {@link TSlider}s, which generate
		 * {@link TScrollEvent}s.
		 */
		protected EventListenerList listenerList = new EventListenerList();

		/**
		 * A {@link TComponent} must have a position and dimensions, there is no
		 * {@link TComponent} version of {@link LayoutManager}s. If your
		 * program's frame is re-sized you will need to take care of the
		 * {@link TComponent}'s positions yourself.
		 * <p>
		 * To make re-positioning simpler to manage, you can use
		 * {@link TCollection}s to move collections of {@link TComponent}s at
		 * the same time.
		 * 
		 * @param x
		 *            - The {@link TComponent}'s x position within the program's
		 *            frame.
		 * @param y
		 *            - The {@link TComponent}'s y position within the program's
		 *            frame.
		 * @param width
		 *            - The {@link TComponent}'s width, in pixels.
		 * @param height
		 *            - The {@link TComponent}'s height, in pixels.
		 */
		public TComponent(double x, double y, double width, double height)
			{
				this.x = x;
				this.y = y;
				this.width = width;
				this.height = height;
			}

		/**
		 * This method tells the {@link TComponent} which
		 * {@link TComponentContainer} it has been added to.
		 * 
		 * @param parent
		 *            - the {@link TComponentContainer} to which this
		 *            {@link TComponent} has been added.
		 */
		protected abstract void setTComponentContainer(TComponentContainer parent);

		/**
		 * This method is called whenever this {@link TComponent} is removed
		 * from its {@link TComponentContainer}.
		 */
		protected abstract void removedFromTComponentContainer();

		/**
		 * To be visible {@link TComponent}s must paint themselves, and unlike
		 * {@link JComponent}s the system doesn't take care of their rendering,
		 * so you must call this method after you have rendered/drawn/painted
		 * all of your own things.
		 * <p>
		 * <strong>Note that Troy's Code {@link www.troyscode.blogspot.com}
		 * takes care of the rendering of {@link TComponent}s
		 * automatically</strong>
		 * 
		 * @param g
		 *            - the {@link Graphics} object which the {@link TComponent}
		 *            s will render themselves onto.
		 */
		public abstract void render(Graphics g);

		/**
		 * This method adds an {@link ActionListener} to this {@link TComponent}
		 * which means that whenever it generates an {@link ActionEvent} it
		 * sends the event to the {@link ActionLIstener}.
		 * 
		 * @param listener
		 *            - the {@link ActionListener} you want the
		 *            {@link TComponent} to send {@link ActionEvent}s to.
		 */
		public final void addActionListener(ActionListener listener)
			{
				listenerList.add(ActionListener.class, listener);
			}

		/**
		 * This method is called whenever the {@link TComponent} generates an
		 * {@link ActionEvent}. It sends the {@link ActionEvent} to every
		 * {@link ActionListener} which has been added to this
		 * {@link TComponent}.
		 * 
		 * @param event
		 *            - The event to be sent to all of the
		 *            {@link ActionListener}s which have been added to this
		 *            {@link TComponent}.
		 */
		protected final void sendActionEvent(ActionEvent event)
			{
				// Guaranteed to return a non-null array
				Object[] listeners = listenerList.getListenerList();
				// Process the listeners last to first, notifying
				// those that are interested in this event
				for (int i = listeners.length - 2; i >= 0; i -= 2)
					{
						if (listeners[i] == ActionListener.class)
							{
								((ActionListener) listeners[i + 1]).actionPerformed(event);
							}
					}
			}

		/**
		 * This method adds a {@link TScrollListener} to this {@link TComponent}
		 * which means that whenever it generates a {@link TScrollEvent} it
		 * sends the event to the {@link TScrollListener}.
		 * <p>
		 * Only {@link TScrollBar}s and {@link TSlider}s generate
		 * {@link TScrollEvent}s.
		 * 
		 * @param listener
		 *            - the {@link TScrollListener} you want the
		 *            {@link TComponent} to send {@link TScrollEvent}s to.
		 */
		public final void addTScrollListener(TScrollListener listener)
			{
				listenerList.add(TScrollListener.class, listener);
			}

		/**
		 * This method is called whenever the {@link TComponent} generates an
		 * {@link TScrollEvent}. It sends the {@link TScrollEvent} to every
		 * {@link TScrollListener} which has been added to this
		 * {@link TComponent}.
		 * 
		 * @param event
		 *            - The event to be sent to all of the
		 *            {@link TScrollListener}s which have been added to this
		 *            {@link TComponent}.
		 */
		protected final void sendTScrollEvent(TScrollEvent event)
			{
				// Guaranteed to return a non-null array
				Object[] listeners = listenerList.getListenerList();
				// Process the listeners last to first, notifying
				// those that are interested in this event
				for (int i = listeners.length - 2; i >= 0; i -= 2)
					{
						if (listeners[i] == TScrollListener.class)
							{
								((TScrollListener) listeners[i + 1]).tScrollBarScrolled(event);
							}
					}
			}

		/**
		 * This method can be used to determine if a {@link TComponent} is
		 * currently being intercated with by the user.
		 * 
		 * @return - a boolean which indicates if this {@link TComponent} is
		 *         being interacted with.
		 */
		public final boolean getInUse()
			{
				return inUse;
			}

		/**
		 * This method sets the x positon, within the program's frame, of the
		 * {@link TComponent}.
		 * 
		 * @param x
		 *            - the new x position, within the program's frame, for the
		 *            {@link TComponent}.
		 */
		public void setX(double x)
			{
				this.x = x;
			}

		/**
		 * This method sets the y positon, within the program's frame, of the
		 * {@link TComponent}.
		 * 
		 * @param y
		 *            - the new y position, within the program's frame, for the
		 *            {@link TComponent}.
		 */
		public void setY(double y)
			{
				this.y = y;
			}

		/**
		 * This method sets the x and y positons, within the program's frame, of
		 * the {@link TComponent}.
		 * 
		 * @param x
		 *            - the new x position, within the program's frame, for the
		 *            {@link TComponent}.
		 * @param y
		 *            - the new y position, within the program's frame, for the
		 *            {@link TComponent}.
		 */
		public void setPosition(double x, double y)
			{
				this.x = x;
				this.y = y;
			}

		/**
		 * This method sets the x and y positon for the center of the
		 * {@link TComponent}, within the program's frame.
		 * 
		 * @param x
		 *            - the new x position of the center of the
		 *            {@link TComponent}, within the program's frame.
		 * @param y
		 *            - the new y position of the center of the
		 *            {@link TComponent}, within the program's frame.
		 */
		public void setPositionOfCenter(double x, double y)
			{
				setPosition(x - (width / 2f), y - (height / 2f));
			}

		/**
		 * This method sets the x and y positon for a corner of the
		 * {@link TComponent}, within the program's frame.
		 * <p>
		 * <strong>Note: this does NOT re-size the {@link TComponent}.</strong>
		 * 
		 * @param x
		 *            - the new x position of the corner of the
		 *            {@link TComponent}, within the program's frame.
		 * @param y
		 *            - the new y position of the corner of the
		 *            {@link TComponent}, within the program's frame.
		 * 
		 * @param corner
		 *            - the corner of the {@link TComponent} to position the
		 *            {@link TComponent} by. Use
		 *            <code>TComponent.CORNERCONSTANT</code>
		 */
		public void setPositionByCorner(double x, double y, byte corner)
			{
				switch (corner)
					{
					case TOPLEFT:
						setPosition(x, y);
						break;
					case TOPRIGHT:
						setPosition(x - width, y);
						break;
					case BOTTOMLEFT:
						setPosition(x, y - height);
						break;
					case BOTTOMRIGHT:
						setPosition(x - width, y - height);
						break;
					}
			}

		/**
		 * This method sets the x and y positon for a corner of the
		 * {@link TComponent}, within the program's frame.
		 * <p>
		 * <strong>Note: this DOES re-size the {@link TComponent}, AND you
		 * cannot invert the {@link TComponent}, i.e. it cannot have a negative
		 * <code>width</code> or <code>height</code></strong>
		 * 
		 * @param x
		 *            - the new x position of the corner of the
		 *            {@link TComponent}, within the program's frame.
		 * @param y
		 *            - the new y position of the corner of the
		 *            {@link TComponent}, within the program's frame.
		 * 
		 * @param corner
		 *            - the corner of the {@link TComponent} to have its
		 *            position set. Use <code>TComponent.CORNERCONSTANT</code>
		 */
		public void setPositionOfCorner(double x, double y, byte corner)
			{
				switch (corner)
					{
					case TOPLEFT:
						if (x < this.x)
							{
								setWidth(this.x - x + width);
								setX(x);
							}
						else if (x < this.x + width)
							{
								setWidth(width - (x - this.x));
								setX(x);
							}

						if (y < this.y)
							{
								setHeight(this.y - y + height);
								setY(y);
							}
						else if (y < this.y + height)
							{
								setHeight(height - (y - this.y));
								setY(y);
							}
						break;
					case TOPRIGHT:
						if (x > this.x)
							{
								setWidth(x - this.x);
							}

						if (y < this.y)
							{
								setHeight(this.y - y + height);
								setY(y);
							}
						else if (y < this.y + height)
							{
								setHeight(height - (y - this.y));
								setY(y);
							}
						break;
					case BOTTOMLEFT:
						if (y > this.y)
							{
								setHeight(y - this.y);
							}

						if (x < this.x)
							{
								setWidth(this.x - x + width);
								setX(x);
							}
						else if (x < this.x + width)
							{
								setWidth(width - (x - this.x));
								setX(x);
							}
						break;
					case BOTTOMRIGHT:
						if (x > this.x)
							{
								setWidth(x - this.x);
							}

						if (y > this.y)
							{
								setHeight(y - this.y);
							}
						break;
					}
			}

		/**
		 * This method sets the width, in pixels, of the {@link TComponent}.
		 * 
		 * @param width
		 *            - the new width, in pixels, for the {@link TComponent}.
		 */
		public void setWidth(double width)
			{
				this.width = width;
			}

		/**
		 * This method sets the height, in pixels, of the {@link TComponent}.
		 * 
		 * @param height
		 *            - the new height, in pixels, for the {@link TComponent}.
		 */
		public void setHeight(double height)
			{
				this.height = height;
			}

		/**
		 * This method sets the dimensions, in pixels, of the {@link TComponent}
		 * .
		 * 
		 * @param width
		 *            - the new width, in pixels, for the {@link TComponent}.
		 * @param height
		 *            - the new height, in pixels, for the {@link TComponent}.
		 */
		public void setDimensions(double width, double height)
			{
				this.width = width;
				this.height = height;
			}

		/**
		 * This method sets the colour of the {@link TComponent}s background.
		 * 
		 * @param colour
		 *            - the colour that the bar will be set to.
		 */
		public final void setBackgroundColour(Color colour)
			{
				backgroundColour = colour;
			}

		/**
		 * This method moves the {@link TComponent} on its x axis the distance,
		 * in pixels, of the parameter passed in.
		 * 
		 * @param x
		 *            - the distance, in pixels to move the {@link TComponent}
		 *            by on the x axis.
		 */
		public void moveX(double x)
			{
				this.x += x;
			}

		/**
		 * This method moves the {@link TComponent} on its y axis the distance,
		 * in pixels, of the parameter passed in.
		 * 
		 * @param y
		 *            - the distance, in pixels to move the {@link TComponent}
		 *            by on the y axis.
		 */
		public void moveY(double y)
			{
				this.y += y;
			}

		/**
		 * This method moves the {@link TComponent} on its x and y axis the
		 * distances, in pixels, of the parameters passed in.
		 * 
		 * @param x
		 *            - the distance, in pixels to move the {@link TComponent}
		 *            by on the x axis.
		 * @param y
		 *            - the distance, in pixels to move the {@link TComponent}
		 *            by on the y axis.
		 */
		public void movePosition(double x, double y)
			{
				this.x += x;
				this.y += y;
			}

		/**
		 * @return The x coordinate of the {@link TComponent} within the
		 *         program's frame.
		 */
		public double getX()
			{
				return x;
			}

		/**
		 * @return The y coordinate of the {@link TComponent} within the
		 *         program's frame.
		 */
		public double getY()
			{
				return y;
			}

		/**
		 * @return The integer x and y coordinates of the {@link TComponent} within the
		 *         program's frame, as a {@link Point}.
		 */
		public Point getIntegerPosition()
			{
				Point point = new Point();
				point.setLocation(x, y);
				return point;
			}
		
		/**
		 * @return The exact x and y coordinates of the {@link TComponent} within the
		 *         program's frame, as a {@link Point}.
		 */
		public TPoint getPosition()
			{
				TPoint point = new TPoint();
				point.setLocation(x, y);
				return point;
			}

		/**
		 * @return The width of the {@link TComponent} in pixels.
		 */
		public double getWidth()
			{
				return width;
			}

		/**
		 * @return The height of the {@link TComponent} in pixels.
		 */
		public double getHeight()
			{
				return height;
			}

		/**
		 * @return The integer width and height of the {@link TComponent} in pixels.
		 */
		public Dimension getIntegerDimensions()
			{
				Dimension dim = new Dimension();
				dim.setSize(width, height);
				return dim;
			}
		
		/**
		 * @return The exact width and height of the {@link TComponent} in pixels.
		 */
		public TDimension getDimensions()
			{
				TDimension dim = new TDimension();
				dim.setSize(width, height);
				return dim;
			}

		/**
		 * This method determines whether a {@link Point} lies within the bounds
		 * of the {@link TComponent}.
		 * 
		 * @param point
		 *            - the point we are checking.
		 * @return <code>true</code> if the point does lie within the bounds of
		 *         the {@link TComponent}.
		 */
		public final boolean containsPoint(Point point)
			{
				if (point.getX() < x || point.getX() > x + width)
					return false;

				if (point.getY() < y || point.getY() > y + height)
					return false;

				return true;
			}

		/**
		 * This method determines whether a {@link TPoint} lies within the
		 * bounds of the {@link TComponent}.
		 * 
		 * @param point
		 *            - the {@link TPoint} we are checking.
		 * @return <code>true</code> if the point does lie within the bounds of
		 *         the {@link TComponent}.
		 */
		public final boolean containsPoint(TPoint point)
			{
				if (point.getX() < x || point.getX() > x + width)
					return false;

				if (point.getY() < y || point.getY() > y + height)
					return false;

				return true;
			}

		/**
		 * This method returns the point on the edge of the {@link TComponent}
		 * which is closest to the {@link Point} passed into the method.
		 * 
		 * @param point
		 *            - the point passed into the method, we want to find the
		 *            point on the {@link TComponent} which is the closest to
		 *            this one.
		 * @return a point which lies on the edge of the {@link TComponent}
		 *         which is the closest point to the {@link Point} passed into
		 *         the method.
		 */
		public final Point getNearestPoint(Point point)
			{
				double nearestX;
				double nearestY;

				if (point.getX() < x)
					nearestX = x;
				else if (point.getX() > x + width)
					nearestX = x + width;
				else
					nearestX = point.getX();

				if (point.getY() < y)
					nearestY = y;
				else if (point.getY() > y + height)
					nearestY = y + height;
				else
					nearestY = point.getY();

				Point nearestPoint = new Point();
				nearestPoint.setLocation(nearestX, nearestY);

				return nearestPoint;
			}

		/**
		 * This method returns the point on the edge of the {@link TComponent}
		 * which is closest to the {@link Point} passed into the method.
		 * 
		 * @param point
		 *            - the point passed into the method, we want to find the
		 *            point on the {@link TComponent} which is the closest to
		 *            this one.
		 * @return a point which lies on the edge of the {@link TComponent}
		 *         which is the closest point to the {@link Point} passed into
		 *         the method.
		 */
		public final TPoint getNearestPoint(TPoint point)
			{
				double nearestX;
				double nearestY;

				if (point.getX() < x)
					nearestX = x;
				else if (point.getX() > x + width)
					nearestX = x + width;
				else
					nearestX = point.getX();

				if (point.getY() < y)
					nearestY = y;
				else if (point.getY() > y + height)
					nearestY = y + height;
				else
					nearestY = point.getY();

				TPoint nearestPoint = new TPoint();
				nearestPoint.setLocation(nearestX, nearestY);

				return nearestPoint;
			}

		/**
		 * This methid is not used by this class.
		 */
		@Override
		public abstract void keyTyped(KeyEvent e);

		/**
		 * This methid is not used by this class.
		 */
		@Override
		public abstract void keyPressed(KeyEvent e);

		/**
		 * This methid is not used by this class.
		 */
		@Override
		public abstract void keyReleased(KeyEvent e);

		/**
		 * This methid is not used by this class.
		 */
		@Override
		public abstract void mouseDragged(MouseEvent e);

		/**
		 * This methid is not used by this class.
		 */
		@Override
		public abstract void mouseMoved(MouseEvent e);

		/**
		 * This methid is not used by this class.
		 */
		@Override
		public abstract void mouseClicked(MouseEvent e);
		
		/**
		 * This methid is not used by this class.
		 */
		@Override
		public abstract void mousePressed(MouseEvent e);

		/**
		 * This methid is not used by this class.
		 */
		@Override
		public abstract void mouseReleased(MouseEvent e);
		
		/**
		 * This methid is not used by this class.
		 */
		@Override
		public abstract void mouseEntered(MouseEvent e);

		/**
		 * This methid is not used by this class.
		 */
		@Override
		public abstract void mouseExited(MouseEvent e);

		/**
		 * This methid is not used by this class.
		 */
		@Override
		public abstract void actionPerformed(ActionEvent e);

		public void mouseWheelMoved(MouseWheelEvent e)
			{
				// TODO Auto-generated method stub
				
			}
	}
